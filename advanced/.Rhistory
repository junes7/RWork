mpg <- rename(mpg,city=cty,highway=hwy)
#####Step4.파생변수 생성하기#####
#total 컬럼을 추가=>cty와 hwy의 합
mpg$total <- mpg$city + mpg$highway
mpg$total
mpg
#avg 컬럼을 추가=>cty와 hwy의 평균
mpg$avg <- (mpg$city + mpg$highway)/2
mpg$avg
####Step05.생성된 total을 가지고 요약정보 확인
mpg$total
summary(mpg$total)
remove.packages("ggplot2")
#ggplot2패키지에서 제공되는 mpg데이터를 분석
install.packages("ggplot2")
install.packages("ggplot2")
####step1. mpg를 dataframe으로 변경####
mpg <- as.data.frame(mpg)
####step2. mpg의 정보를 출력 ####
dim(mpg)
dim(mpg) #행, 열 갯수 확인
####step2. mpg의 정보를 출력 ####
dim(mpg)
####step1. mpg를 dataframe으로 변경####
mpg <- as.data.frame(mpg)
dim(mpg) #행, 열 갯수 확인
mpg$total
mpg$avg
mpg <- rename(mpg,city=cty,highway=hwy)
####step3. mpg의 컬럼명을 변경####
# cty => city  hwy => highway
library(dplyr)
####step3. mpg의 컬럼명을 변경####
# cty => city  hwy => highway
library("dplyr")
mpg <- rename(mpg,city=cty,highway=hwy)
mpg
sample(1:10)
sample(1:10)
a <- sample(1:10)
#1부터 10까지 순서가 랜덤하게 숫자가 발생되어 들어간다.
#size=5는 size가 5인 것들이 들어간다.
a <- sample(1:10,size = 5)
a <- sample(1:10,size = 5,repalce=FALSE)
a
a <- sample(1:10,size = 5,repalce=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=TRUE)
a
a <- sample(1:10,size = 5,replace=TRUE)
a
a <- sample(1:10,size = 5,replace=TRUE)
a
a <- sample(1:10,size = 5,replace=TRUE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
#1부터 10까지 순서가 랜덤하게 숫자가 발생되어 들어간다.
#size=5는 숫자 개수가 5개 들어간다는 말이다.
#replace는 중복허용 유무이다.
#replace = FALSE는 중복을 허용하지 않는다.
#replace = TRUE는 중복을 허용하고 기존에 사용했던걸 다시 사용할 수 있다.
#set.seed는 값이 바뀌지 말라고 설정해 놓은 것이다.
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a <- sample(1:10,size = 5,replace=FALSE)
a
a
a
#1부터 10까지 순서가 랜덤하게 숫자가 발생되어 들어간다.
#size=5는 숫자 개수가 5개 들어간다는 말이다.
#replace는 중복허용 유무이다.
#replace = FALSE는 중복을 허용하지 않는다.
#replace = TRUE는 중복을 허용하고 기존에 사용했던걸 다시 사용할 수 있다.
#set.seed는 값이 바뀌지 말라고 설정해 놓은 것이다.
#set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
a
a
#1부터 10까지 순서가 랜덤하게 숫자가 발생되어 들어간다.
#size=5는 숫자 개수가 5개 들어간다는 말이다.
#replace는 중복허용 유무이다.
#replace = FALSE는 중복을 허용하지 않는다.
#replace = TRUE는 중복을 허용하고 기존에 사용했던걸 다시 사용할 수 있다.
#set.seed는 값이 바뀌지 말라고 설정해 놓은 것이다.
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
a
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(121)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(121)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(1222)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(1212)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(121)#1222는 랜덤한 수를 찾아가게 만들어주는 key값이다.
a <- sample(1:10,size = 5,replace=FALSE)
a
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
set.seed(1222)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
} else {
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#위 작업을 함수를 이용해서 할것 - info2
#excel에서 쓰는 ifelse와 동일하다
ifdf[,"info2"] <- ifelse(test=ifdf$myval=="spring",
yes="쉽다",
no="할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
} else {
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#위 작업을 함수를 이용해서 할것 - info2
#excel에서 쓰는 ifelse와 동일하다
ifdf[,"info2"] <- ifelse(test=ifdf$myval=="spring",
yes="쉽다",
no="할꺼다")
ifdf
ifdf[,"info3"] <- ifelse(test=ifdf$myval=="spring",
yes="쉽다",
no=ifelse(test=ifdf$myval=="bigdata",
yes = "머신셋팅"),
no="device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
mpg[,"pass/fail"] <- ifelse(test=ifdf$myval>=30,
yes="pass",
no="fail")
mpg
mpg[,"pass/fail"] <- ifelse(test=mpg$total>=30,
yes="pass",
no="fail")
mpg
mpg[,"grade"] <- ifelse(test=mpg$total>=40,
yes="A",
no=ifelse(test=mpg$total>=35,
yes = "B",
no=ifelse(test=mpg$total>=30,
yes = "c",
no="D")))
mpg
table(exam$eng)
qlot(exam$eng)
qplot(exam$eng)
table(exam$eng)
qplot(exam$eng)
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
qplot(exam$eng)
install.packages("rJava")
library(rJava)
install.packages(c("wordcloud","RColorBrewer"))
install.packages("KoNLP")
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10;
class(num1)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10
class(num1)
num2 = 10L
class(num2)
result = num1
result
result <- num1+num2
result
class(result)
data(package ="MASS") #R내부의 샘플데이터셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
t(colnames(Boston))
df <- head(Boston[,1:7])
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin : 1 => 행방향, 2: 열방향
df[,"total"] <- apply(X = df, MARGIN = )
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin : 1 => 행방향, 2: 열방향
df[,"total"] <- apply(X = df, MARGIN = 1,FUN = "sum")
df
apply(X = df, MARGIN = 1,FUN = "sum")
round(apply(X = df, MARGIN = 2,FUN = "mean"),4)
round(apply(X = df, MARGIN = 2,FUN = "sum"),4)
#sapply는 apply의 margin속성을 2로 정의
sapply(X = df, FUN = "mean")
apply(X = df, MARGIN = 2,FUN = "mean")
t(t(sapply(X = df, FUN = "class")))
#주어진 데이터에서 원하는 데이터만 추출
#dplyr은 문자열에 대한 작업에 특화된 기능이 많은패키지
#c++로 구현되어 있어 가장 빠르다.
#dplyr라이브러리는 실행할 때 코드 전체를 범위지정해서 실행
#라이브러리 올릴 때 쌍따옴표 붙이는게 맞다.
library("dplyr")
data("airquality")
head(airquality)
df2 <- airquality
df2
#필터링 - 벡터연산
head(df2[,1:4])
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1]
df2[df2$Day==1,]
df2$Day==1
df2[df2$Day==1,]
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2[df2$Day!=2,]
df2[df2$Day==1 & df2$Day==2,]
sum(df2$Day %in% 1:2)
df2_data2 = df2[df2$Day %in% 1:2,]
nrow(df2_data2)
#dplyr 패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & Month==5)
nrow(df2_data2)
filter(df2,Day %in% c(1,3,5))
library("dplyr")
exam <- read.csv("csv_exam.csv")
exam
# %in%기호는 변수의 값이 지정한 조건 목록에 해당하는지 확인하는 기능이다.
exam %>%
filter(class==1) %>%
filter(math>=50)
#select
exam %>% select(-math)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>%
filter(class==1) %>%
select(id,math,science)
exam %>% arrange(class,desc(eng))
exam %>% arrange(desc(id))
exam %>% arrange(class,desc(eng))
exam %>% arrange(class,desc(math))
exam %>% arrange(class,desc(english))
exam %>% select(id,math,eng)
exam %>% select(id,math,english)
exam <- rename(eng=english)
exam %>% select(id,math,english)
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu = c(77,56,99,100,99))
test1
test2
final_data <- left_join(test1,test2,by="id")
final_data
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"))
str(namedata)
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"),
stringsAsFactors = FALSE)
str(namedata)
exam
exam_new <- left_join(exam,namedata,by="class")
exam_new
group_total <- bind_rows(groupA,groupB)
groupA <- data.frame(id=c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu = c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
exam_new <- left_join(exam,namedata,by="class")
exam_new
mpg
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
exam
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
exam %>%
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
exam %>%
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험")) %>%
exam
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험"))
exam
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
mpg %>%
group_by(class) %>%
summarise(cty_sum = sum(cty),
cty_mean = mean(cty))
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
mpg
mpg %>%
group_by(class) %>%
summarise(cty_sum = sum(city),
cty_mean = mean(city))
exam %>% arrange(class,desc(cty))
exam %>% arrange(class,desc(city))
mpg %>% arrange(class,desc(city))
mpg %>% arrange(class,desc(hwy))
mpg %>% arrange(class,desc(highway))
head(mpg %>% arrange(class,desc(city)))
head(mpg %>% arrange(class,desc(highway)))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city))
mpg %>% arrange(class,desc(city))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city)) %>%
arrange(desc(city))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city)) %>%
arrange(class,desc(city))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city)) %>%
arrange(desc(cty_mean))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city)) %>%
arrange(desc(city)) %>%
head(3)
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(city)) %>%
arrange(desc(cty_mean)) %>%
head(3)
mpg %>%
group_by(class) %>%
filter(class == "compact") %>%
summarise(cty_count = n()) %>%
arrange(desc(cty_count))
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(cty_count = n()) %>%
arrange(desc(cty_count))
mpg %>%
group_by(manufacturer) %>%
summarise(hwy_mean = mean(highway)) %>%
arrange(desc(hwy_mean)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(cty_count = n()) %>%
arrange(desc(cty_count))
mpg
